{"ast":null,"code":"var _jsxFileName = \"X:\\\\\\u05EA\\u05E9\\u05E4\\u05D0\\\\2\\\\\\u05E9\\u05D5\\u05D5\\u05E8\\u05E6\\u05D1\\u05E8\\u05D2 \\u05D9\\u05D4\\u05D5\\u05D3\\u05D9\\u05EA\\\\sample\\\\src\\\\component\\\\AppComponent\\\\Todos.js\",\n    _s = $RefreshSig$();\n\n// import {  useState, useEffect } from 'react'\n// function Todos() {\nconst [contact, setContact] = useState(null);\nconst [select, setSelect] = useState('serial');\nconst [information, setInformation] = useState(null);\nconst user = JSON.parse(localStorage.getItem('user'));\nuseEffect(() => {\n  fetch(`https://jsonplaceholder.typicode.com/todos/?userId=${user.id}`).then(response => response.json().then(data => {\n    mapy(data);\n    setInformation(data);\n  })).catch(() => {});\n}, [user.id]);\n\nconst serial = () => {\n  let data = information;\n  data.sort((a, b) => {\n    if (a.id < b.id) return -1;else return 1;\n  });\n  setInformation(data);\n  mapy(information);\n};\n\nconst alphaBeit = () => {\n  let data = information;\n  data.sort((a, b) => {\n    if (a.title < b.title) return -1;else return 1;\n  });\n  setInformation(data);\n  mapy(information);\n};\n\nconst complete = () => {\n  let notChecked = [];\n  let checked = [];\n\n  for (let i = 0; i < information.length; ++i) {\n    if (information[i].completed) {\n      checked.push(information[i]);\n    } else {\n      notChecked.push(information[i]);\n    }\n  }\n\n  let data = [...checked, ...notChecked];\n  setInformation(data);\n  mapy(data);\n};\n\nconst random = () => {\n  let data = information;\n\n  for (let i = 0; i < data.length; ++i) {\n    let randomNum = Math.floor(Math.random() * data.length);\n    let num = data[i];\n    data[i] = data[randomNum];\n    data[randomNum] = num;\n  }\n\n  setInformation(data);\n  mapy(data);\n};\n\nconst mapy = data => {\n  let ul = data.map(todo => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: todo.completed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: todo.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, todo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }, this);\n  });\n  setContact(ul);\n};\n\nconst handleOnChange = e => {\n  let value = e.target.value;\n  setSelect(value);\n\n  switch (value) {\n    case \"alphaBeit\":\n      alphaBeit();\n      break;\n\n    case \"complete\":\n      complete();\n      break;\n\n    case \"random\":\n      random();\n      break;\n\n    default:\n      serial();\n      break;\n  }\n}; //     return (\n//         <div>\n//             <select value={select} onChange={(e) => handleOnChange(e)} >\n//                 <option value=\"serial\">serial</option>\n//                 <option value=\"alphaBeit\">alphaBeit</option>\n//                 <option value=\"complete\">complete</option>\n//                 <option value=\"random\">random</option>\n//             </select>\n//             <div>{contact}</div>\n//         </div>\n//     )\n// }\n// export default Todos;\n\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Avatar from '@material-ui/core/Avatar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper\n  }\n}));\nexport default function Todos() {\n  _s();\n\n  const classes = useStyles();\n  const [checked, setChecked] = React.useState([1]);\n\n  const handleToggle = value => () => {\n    const currentIndex = checked.indexOf(value);\n    const newChecked = [...checked];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    setChecked(newChecked);\n  };\n\n  return /*#__PURE__*/_jsxDEV(List, {\n    dense: true,\n    className: classes.root,\n    children: [0, 1, 2, 3].map(value => {\n      const labelId = `checkbox-list-secondary-label-${value}`;\n      return /*#__PURE__*/_jsxDEV(ListItem, {\n        button: true,\n        children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            alt: `Avatar n°${value + 1}`,\n            src: `/static/images/avatar/${value + 1}.jpg`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          id: labelId,\n          primary: `Line item ${value + 1}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n          children: /*#__PURE__*/_jsxDEV(Checkbox, {\n            edge: \"end\",\n            onChange: handleToggle(value),\n            checked: checked.indexOf(value) !== -1,\n            inputProps: {\n              'aria-labelledby': labelId\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, value, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Todos, \"XbC/dOvaPtgvS6rn7QFVAzPBVvA=\", false, function () {\n  return [useStyles];\n});\n\n_c = Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["X:/תשפא/2/שוורצברג יהודית/sample/src/component/AppComponent/Todos.js"],"names":["contact","setContact","useState","select","setSelect","information","setInformation","user","JSON","parse","localStorage","getItem","useEffect","fetch","id","then","response","json","data","mapy","catch","serial","sort","a","b","alphaBeit","title","complete","notChecked","checked","i","length","completed","push","random","randomNum","Math","floor","num","ul","map","todo","handleOnChange","e","value","target","React","makeStyles","List","ListItem","ListItemSecondaryAction","ListItemText","ListItemAvatar","Checkbox","Avatar","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","Todos","classes","setChecked","handleToggle","currentIndex","indexOf","newChecked","splice","labelId"],"mappings":"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","sourcesContent":["// import {  useState, useEffect } from 'react'\r\n\r\n\r\n// function Todos() {\r\n    const [contact, setContact] = useState(null);\r\n    const [select, setSelect] = useState('serial');\r\n    const [information, setInformation] = useState(null);\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n    useEffect(() => {\r\n        fetch(`https://jsonplaceholder.typicode.com/todos/?userId=${user.id}`)\r\n            .then(response => response.json()\r\n                .then((data) => {\r\n                    mapy(data);\r\n                    setInformation(data)\r\n                }))\r\n                .catch(() =>{})\r\n\r\n    }, [user.id])\r\n\r\n\r\n    const serial = () => {\r\n\r\n        let data = information;\r\n        data.sort((a, b) => {\r\n            if (a.id < b.id)\r\n                return -1\r\n            else\r\n                return 1;\r\n        }\r\n        )\r\n        setInformation(data);\r\n        mapy(information)\r\n\r\n    }\r\n    const alphaBeit = () => {\r\n        let data = information;\r\n        data.sort((a, b) => {\r\n            if (a.title < b.title)\r\n                return -1\r\n            else\r\n                return 1;\r\n        }\r\n        );\r\n        setInformation(data);\r\n        mapy(information)\r\n    }\r\n\r\n    const complete = () => {\r\n        let notChecked = []\r\n        let checked = [];\r\n        for (let i = 0; i < information.length; ++i) {\r\n            if (information[i].completed) {\r\n                checked.push(information[i]);\r\n            } else {\r\n                notChecked.push(information[i])\r\n            }\r\n\r\n        }\r\n        let data = [...checked, ...notChecked];\r\n        setInformation(data)\r\n        mapy(data);\r\n    }\r\n\r\n    const random = () => {\r\n        let data = information;\r\n        for (let i = 0; i < data.length; ++i) {\r\n            let randomNum = Math.floor(Math.random() * data.length);\r\n            let num = data[i];\r\n            data[i] = data[randomNum];\r\n            data[randomNum] = num;\r\n        }\r\n        setInformation(data)\r\n        mapy(data);\r\n    }\r\n\r\n    const mapy = (data) => {\r\n        let ul = data.map(todo => {\r\n            return (<p key={todo.id}>\r\n                <input type='checkbox' checked={todo.completed} />\r\n                <span>{todo.title}</span>\r\n            </p>)\r\n        })\r\n        setContact(ul)\r\n    }\r\n\r\n\r\n    const handleOnChange = (e) => {\r\n        let value = e.target.value;\r\n        setSelect(value);\r\n        switch (value) {\r\n            case \"alphaBeit\":\r\n                alphaBeit();\r\n                break;\r\n            case \"complete\":\r\n                complete();\r\n                break;\r\n            case \"random\":\r\n                random();\r\n                break;\r\n            default:\r\n                serial();\r\n                break;\r\n        }\r\n    }\r\n\r\n//     return (\r\n//         <div>\r\n\r\n//             <select value={select} onChange={(e) => handleOnChange(e)} >\r\n//                 <option value=\"serial\">serial</option>\r\n//                 <option value=\"alphaBeit\">alphaBeit</option>\r\n//                 <option value=\"complete\">complete</option>\r\n//                 <option value=\"random\">random</option>\r\n//             </select>\r\n//             <div>{contact}</div>\r\n//         </div>\r\n\r\n//     )\r\n// }\r\n// export default Todos;\r\n\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport default function Todos() {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState([1]);\r\n\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  return (\r\n    <List dense className={classes.root}>\r\n      {[0, 1, 2, 3].map((value) => {\r\n        const labelId = `checkbox-list-secondary-label-${value}`;\r\n        return (\r\n          <ListItem key={value} button>\r\n            <ListItemAvatar>\r\n              <Avatar\r\n                alt={`Avatar n°${value + 1}`}\r\n                src={`/static/images/avatar/${value + 1}.jpg`}\r\n              />\r\n            </ListItemAvatar>\r\n            <ListItemText id={labelId} primary={`Line item ${value + 1}`} />\r\n            <ListItemSecondaryAction>\r\n              <Checkbox\r\n                edge=\"end\"\r\n                onChange={handleToggle(value)}\r\n                checked={checked.indexOf(value) !== -1}\r\n                inputProps={{ 'aria-labelledby': labelId }}\r\n              />\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}