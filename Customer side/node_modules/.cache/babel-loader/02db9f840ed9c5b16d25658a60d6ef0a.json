{"ast":null,"code":"var _jsxFileName = \"X:\\\\\\u05EA\\u05E9\\u05E4\\u05D0\\\\2\\\\\\u05E9\\u05D5\\u05D5\\u05E8\\u05E6\\u05D1\\u05E8\\u05D2 \\u05D9\\u05D4\\u05D5\\u05D3\\u05D9\\u05EA\\\\sample\\\\src\\\\component\\\\AppComponent\\\\Todos.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport AttachmentOutlinedIcon from '@material-ui/icons/AttachmentOutlined';\nimport Favorite from '@material-ui/icons/Favorite';\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder'; // function Todos() {\n// const [contact, setContact] = useState(null);\n// const [select, setSelect] = useState('serial');\n// const [information, setInformation] = useState(null);\n// const user = JSON.parse(localStorage.getItem('user'));\n// useEffect(() => {\n//     fetch(`https://jsonplaceholder.typicode.com/todos/?userId=${user.id}`)\n//         .then(response => response.json()\n//             .then((data) => {\n//                 mapy(data);\n//                 setInformation(data)\n//             }))\n//             .catch(() =>{})\n// }, [user.id])\n// const serial = () => {\n//     let data = information;\n//     data.sort((a, b) => {\n//         if (a.id < b.id)\n//             return -1\n//         else\n//             return 1;\n//     }\n//     )\n//     setInformation(data);\n//     mapy(information)\n// }\n// const alphaBeit = () => {\n//     let data = information;\n//     data.sort((a, b) => {\n//         if (a.title < b.title)\n//             return -1\n//         else\n//             return 1;\n//     }\n//     );\n//     setInformation(data);\n//     mapy(information)\n// }\n// const complete = () => {\n//     let notChecked = []\n//     let checked = [];\n//     for (let i = 0; i < information.length; ++i) {\n//         if (information[i].completed) {\n//             checked.push(information[i]);\n//         } else {\n//             notChecked.push(information[i])\n//         }\n//     }\n//     let data = [...checked, ...notChecked];\n//     setInformation(data)\n//     mapy(data);\n// }\n// const random = () => {\n//     let data = information;\n//     for (let i = 0; i < data.length; ++i) {\n//         let randomNum = Math.floor(Math.random() * data.length);\n//         let num = data[i];\n//         data[i] = data[randomNum];\n//         data[randomNum] = num;\n//     }\n//     setInformation(data)\n//     mapy(data);\n// }\n// const mapy = (data) => {\n//     let ul = data.map(todo => {\n//         return (<p key={todo.id}>\n//             <input type='checkbox' checked={todo.completed} />\n//             <span>{todo.title}</span>\n//         </p>)\n//     })\n//     setContact(ul)\n// }\n// const handleOnChange = (e) => {\n//     let value = e.target.value;\n//     setSelect(value);\n//     switch (value) {\n//         case \"alphaBeit\":\n//             alphaBeit();\n//             break;\n//         case \"complete\":\n//             complete();\n//             break;\n//         case \"random\":\n//             random();\n//             break;\n//         default:\n//             serial();\n//             break;\n//     }\n// }\n//     return (\n//         <div>\n//             <select value={select} onChange={(e) => handleOnChange(e)} >\n//                 <option value=\"serial\">serial</option>\n//                 <option value=\"alphaBeit\">alphaBeit</option>\n//                 <option value=\"complete\">complete</option>\n//                 <option value=\"random\">random</option>\n//             </select>\n//             <div>{contact}</div>\n//         </div>\n//     )\n// }\n// export default Todos;\n\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper\n  }\n}));\nexport default function Todos() {\n  _s();\n\n  const classes = useStyles();\n  const [select, setSelect] = useState('serial');\n  const [information, setInformation] = useState(null);\n  const user = JSON.parse(localStorage.getItem('user'));\n  useEffect(() => {\n    fetch(`https://jsonplaceholder.typicode.com/todos/?userId=${user.id}`).then(response => response.json().then(data => {\n      setInformation(data);\n    })).catch(() => {});\n  }, [user.id]);\n\n  const serial = () => {\n    let data = information;\n    data.sort((a, b) => {\n      if (a.id < b.id) return -1;else return 1;\n    });\n    setInformation(data);\n  };\n\n  const alphaBeit = () => {\n    let data = information;\n    data.sort((a, b) => {\n      if (a.title < b.title) return -1;else return 1;\n    });\n    setInformation(data);\n  };\n\n  const complete = () => {\n    let notChecked = [];\n    let checked = [];\n\n    for (let i = 0; i < information.length; ++i) {\n      if (information[i].completed) {\n        checked.push(information[i]);\n      } else {\n        notChecked.push(information[i]);\n      }\n    }\n\n    let data = [...checked, ...notChecked];\n    setInformation(data);\n  };\n\n  const random = () => {\n    let data = information;\n\n    for (let i = 0; i < data.length; ++i) {\n      let randomNum = Math.floor(Math.random() * data.length);\n      let num = data[i];\n      data[i] = data[randomNum];\n      data[randomNum] = num;\n    }\n\n    setInformation(data);\n  };\n\n  const handleOnChange = e => {\n    let value = e.target.value;\n    setSelect(value);\n\n    switch (value) {\n      case \"alphaBeit\":\n        alphaBeit();\n        break;\n\n      case \"complete\":\n        complete();\n        break;\n\n      case \"random\":\n        random();\n        break;\n\n      default:\n        serial();\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(List, {\n    dense: true,\n    className: classes.root,\n    children: information && information.map(value => {\n      const labelId = `checkbox-list-secondary-label-${value}`;\n      return /*#__PURE__*/_jsxDEV(ListItem, {\n        button: true,\n        children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n          children: /*#__PURE__*/_jsxDEV(AttachmentOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          id: labelId,\n          primary: value.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n          children: /*#__PURE__*/_jsxDEV(Checkbox, {\n            icon: /*#__PURE__*/_jsxDEV(FavoriteBorder, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 31\n            }, this),\n            checkedIcon: /*#__PURE__*/_jsxDEV(Favorite, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 64\n            }, this),\n            name: \"checkedH\",\n            edge: \"end\",\n            checked: value.completed,\n            inputProps: {\n              'aria-labelledby': labelId\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this)]\n      }, value, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Todos, \"Y0bieddlhXj5D9rEB581SjWF53Y=\", false, function () {\n  return [useStyles];\n});\n\n_c = Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["X:/תשפא/2/שוורצברג יהודית/sample/src/component/AppComponent/Todos.js"],"names":["useState","useEffect","ListItemIcon","AttachmentOutlinedIcon","Favorite","FavoriteBorder","React","makeStyles","List","ListItem","ListItemSecondaryAction","ListItemText","Checkbox","useStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","Todos","classes","select","setSelect","information","setInformation","user","JSON","parse","localStorage","getItem","fetch","id","then","response","json","data","catch","serial","sort","a","b","alphaBeit","title","complete","notChecked","checked","i","length","completed","push","random","randomNum","Math","floor","num","handleOnChange","e","value","target","map","labelId"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport AttachmentOutlinedIcon from '@material-ui/icons/AttachmentOutlined';\r\nimport Favorite from '@material-ui/icons/Favorite';\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\n\r\n// function Todos() {\r\n// const [contact, setContact] = useState(null);\r\n// const [select, setSelect] = useState('serial');\r\n// const [information, setInformation] = useState(null);\r\n// const user = JSON.parse(localStorage.getItem('user'));\r\n// useEffect(() => {\r\n//     fetch(`https://jsonplaceholder.typicode.com/todos/?userId=${user.id}`)\r\n//         .then(response => response.json()\r\n//             .then((data) => {\r\n//                 mapy(data);\r\n//                 setInformation(data)\r\n//             }))\r\n//             .catch(() =>{})\r\n\r\n// }, [user.id])\r\n\r\n\r\n// const serial = () => {\r\n\r\n//     let data = information;\r\n//     data.sort((a, b) => {\r\n//         if (a.id < b.id)\r\n//             return -1\r\n//         else\r\n//             return 1;\r\n//     }\r\n//     )\r\n//     setInformation(data);\r\n//     mapy(information)\r\n\r\n// }\r\n// const alphaBeit = () => {\r\n//     let data = information;\r\n//     data.sort((a, b) => {\r\n//         if (a.title < b.title)\r\n//             return -1\r\n//         else\r\n//             return 1;\r\n//     }\r\n//     );\r\n//     setInformation(data);\r\n//     mapy(information)\r\n// }\r\n\r\n// const complete = () => {\r\n//     let notChecked = []\r\n//     let checked = [];\r\n//     for (let i = 0; i < information.length; ++i) {\r\n//         if (information[i].completed) {\r\n//             checked.push(information[i]);\r\n//         } else {\r\n//             notChecked.push(information[i])\r\n//         }\r\n\r\n//     }\r\n//     let data = [...checked, ...notChecked];\r\n//     setInformation(data)\r\n//     mapy(data);\r\n// }\r\n\r\n// const random = () => {\r\n//     let data = information;\r\n//     for (let i = 0; i < data.length; ++i) {\r\n//         let randomNum = Math.floor(Math.random() * data.length);\r\n//         let num = data[i];\r\n//         data[i] = data[randomNum];\r\n//         data[randomNum] = num;\r\n//     }\r\n//     setInformation(data)\r\n//     mapy(data);\r\n// }\r\n\r\n// const mapy = (data) => {\r\n//     let ul = data.map(todo => {\r\n//         return (<p key={todo.id}>\r\n//             <input type='checkbox' checked={todo.completed} />\r\n//             <span>{todo.title}</span>\r\n//         </p>)\r\n//     })\r\n//     setContact(ul)\r\n// }\r\n\r\n\r\n// const handleOnChange = (e) => {\r\n//     let value = e.target.value;\r\n//     setSelect(value);\r\n//     switch (value) {\r\n//         case \"alphaBeit\":\r\n//             alphaBeit();\r\n//             break;\r\n//         case \"complete\":\r\n//             complete();\r\n//             break;\r\n//         case \"random\":\r\n//             random();\r\n//             break;\r\n//         default:\r\n//             serial();\r\n//             break;\r\n//     }\r\n// }\r\n\r\n//     return (\r\n//         <div>\r\n\r\n//             <select value={select} onChange={(e) => handleOnChange(e)} >\r\n//                 <option value=\"serial\">serial</option>\r\n//                 <option value=\"alphaBeit\">alphaBeit</option>\r\n//                 <option value=\"complete\">complete</option>\r\n//                 <option value=\"random\">random</option>\r\n//             </select>\r\n//             <div>{contact}</div>\r\n//         </div>\r\n\r\n//     )\r\n// }\r\n// export default Todos;\r\n\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport default function Todos() {\r\n  const classes = useStyles();\r\n  const [select, setSelect] = useState('serial');\r\n  const [information, setInformation] = useState(null);\r\n  const user = JSON.parse(localStorage.getItem('user'));\r\n  useEffect(() => {\r\n    fetch(`https://jsonplaceholder.typicode.com/todos/?userId=${user.id}`)\r\n      .then(response => response.json()\r\n        .then((data) => {\r\n\r\n          setInformation(data)\r\n        }))\r\n      .catch(() => { })\r\n\r\n  }, [user.id])\r\n\r\n\r\n  const serial = () => {\r\n\r\n    let data = information;\r\n    data.sort((a, b) => {\r\n      if (a.id < b.id)\r\n        return -1\r\n      else\r\n        return 1;\r\n    }\r\n    )\r\n    setInformation(data);\r\n\r\n\r\n  }\r\n  const alphaBeit = () => {\r\n    let data = information;\r\n    data.sort((a, b) => {\r\n      if (a.title < b.title)\r\n        return -1\r\n      else\r\n        return 1;\r\n    }\r\n    );\r\n    setInformation(data);\r\n\r\n  }\r\n\r\n  const complete = () => {\r\n    let notChecked = []\r\n    let checked = [];\r\n    for (let i = 0; i < information.length; ++i) {\r\n      if (information[i].completed) {\r\n        checked.push(information[i]);\r\n      } else {\r\n        notChecked.push(information[i])\r\n      }\r\n\r\n    }\r\n    let data = [...checked, ...notChecked];\r\n    setInformation(data)\r\n\r\n  }\r\n\r\n  const random = () => {\r\n    let data = information;\r\n    for (let i = 0; i < data.length; ++i) {\r\n      let randomNum = Math.floor(Math.random() * data.length);\r\n      let num = data[i];\r\n      data[i] = data[randomNum];\r\n      data[randomNum] = num;\r\n    }\r\n    setInformation(data)\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  const handleOnChange = (e) => {\r\n    let value = e.target.value;\r\n    setSelect(value);\r\n    switch (value) {\r\n      case \"alphaBeit\":\r\n        alphaBeit();\r\n        break;\r\n      case \"complete\":\r\n        complete();\r\n        break;\r\n      case \"random\":\r\n        random();\r\n        break;\r\n      default:\r\n        serial();\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <List dense className={classes.root}>\r\n      {information && (information.map((value) => {\r\n        const labelId = `checkbox-list-secondary-label-${value}`;\r\n        return (\r\n          <ListItem key={value} button>\r\n            <ListItemIcon>\r\n              <AttachmentOutlinedIcon/>\r\n            </ListItemIcon>\r\n            <ListItemText id={labelId} primary={value.title} />\r\n            <ListItemSecondaryAction>\r\n              {/* <Checkbox\r\n                edge=\"end\"\r\n                checked={value.completed}\r\n                inputProps={{ 'aria-labelledby': labelId }}\r\n              /> */}\r\n              <Checkbox icon={<FavoriteBorder />} checkedIcon={<Favorite />} name=\"checkedH\"  edge=\"end\"\r\n                checked={value.completed}\r\n                inputProps={{ 'aria-labelledby': labelId }}/>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        );\r\n      }))}\r\n    </List>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}